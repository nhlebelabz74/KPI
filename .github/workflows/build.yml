name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for electron-builder to detect tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: ./client

      - name: Build Electron app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          npm run electron:build
        working-directory: ./client

      - name: Create Release
        id: create-release
        shell: pwsh  # Explicitly use PowerShell
        run: |
          $response = gh release create ${{ github.ref_name }} `
            --title "${{ github.ref_name }}" `
            --notes "Automated release" `
            --draft
          $upload_url = gh release view ${{ github.ref_name }} --json uploadUrl --jq .uploadUrl
          echo "::set-output name=upload_url::$upload_url"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./client/dist/*.exe  # Adjust to your actual build path
          asset_name: MyApp-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream

      - name: Publish Release
        run: gh release edit ${{ github.ref_name }} --draft=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}